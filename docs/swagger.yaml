swagger: '2.0'
info:
  title: V5 Challenge Resource API
  description: >
    ## Security constraints


    GET/POST/DELETE `/Resources` endpoints can only be called from admins, via
    M2M, or users for whom there is at least one existing `Resource` where
    `role.fullReadAccess`, `role.fullWriteAccess` and `role.isActive` are `true`.
    Special Case: User can create/delte selfObtainable resource for its own.

    `Resource Roles` POST and PUT endpoints can only be called from admins or
    via M2M.

    GET `/Resources/{memberId}/challenges` endpoints can be called from any
    authenticated user or via M2M.

    Resource role phase dependencies APIs can only be called from admins or M2M
    with valid scopes.
  version: 1.0.0
host: api.topcoder.com
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
schemes:
  - http
  - https
basePath: /v5
produces:
  - application/json
consumes:
  - application/json
paths:
  /health:
    get:
      description: Health check endpoint
      tags:
        - Health
      responses:
        '200':
          description: success
          schema:
            type: object
            properties:
              checksRun:
                type: integer
                example: 1
        '503':
          $ref: '#/definitions/ServiceUnavailable'
  /resources:
    get:
      description: Get all resources for a challenge
      tags:
        - Resources
      security:
        - Bearer: []
      parameters:
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/perPage'
        - name: challengeId
          type: string
          description: The challenge id
          format: UUID
          in: query
          required: true
        - name: memberId
          type: integer
          description: The member id
          in: query
        - name: memberHandle
          type: string
          description: The member handle
          in: query
        - name: roleId
          type: string
          description: role id to filter on
          format: UUID
          in: query
          required: false
        - name: sortBy
          type: string
          description: Sort the results by the field.
          in: query
          required: false
        - name: sortOrder
          type: string
          description: Order the results by the asc/desc.
          in: query
          required: false
      responses:
        '200':
          description: OK - the request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Resource'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/ServerError'
    post:
      description: >-
        Create a new resource for a challenge. Verify that the challenge exists
        by calling the **/v5/challenges/{id}** endpoint using an M2M token.
      tags:
        - Resources
      security:
        - Bearer: []
      parameters:
        - name: resource
          in: body
          required: true
          schema:
            $ref: '#/definitions/ResourceRequestBody'
      responses:
        '200':
          description: OK - the request was successful
          schema:
            $ref: '#/definitions/Resource'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '409':
          $ref: '#/definitions/Conflict'
        '500':
          $ref: '#/definitions/ServerError'
    delete:
      description: Delete a resource from a challenge
      tags:
        - Resources
      security:
        - Bearer: []
      parameters:
        - name: resource
          in: body
          required: true
          schema:
            $ref: '#/definitions/ResourceRequestBody'
      responses:
        '200':
          description: OK - the request was successful
          schema:
            $ref: '#/definitions/Resource'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/ServerError'
  '/resources/{memberId}/challenges':
    get:
      description: List all challenges that given topcoder member has access to.
      tags:
        - Resources
      security:
        - Bearer: []
      parameters:
        - name: memberId
          type: integer
          in: path
          required: true
          description: the user id
        - name: resourceRoleId
          type: string
          format: UUID
          in: query
          required: false
          description: the resource role id filter
        - name: lastDate
          type: string
          description: the last date for a page records, used as the flag for getting the next page based on this criteria.
      responses:
        '200':
          description: OK - the request was successful
          schema:
            type: array
            items:
              type: string
              description: the challenge id
              format: UUID
              example: 97ee7396-5946-4a2e-968a-b35c7b009753
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '500':
          $ref: '#/definitions/ServerError'
  /resource-roles:
    get:
      description: >-
        Get all resource roles. If isActive parameter is provided, filter the
        results by the set properties.
      tags:
        - Resource Roles
      security:
        - Bearer: []
      parameters:
        - name: isActive
          type: boolean
          in: query
          description: Filters the results based on the `isActive` property
        - name: name
          type: string
          in: query
          description: Filters the results based on the `name` property
        - name: legacyId
          type: number
          in: query
          description: Filters the results based on the `legacyId` property
        - name: selfObtainable
          type: boolean
          in: query
          description: Filters the results based on the `selfObtainable` property
        - name: fullAccess
          type: boolean
          in: query
          description: Filters the results based on the `fullAccess` property
      responses:
        '200':
          description: OK - the request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ResourceRole'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '500':
          $ref: '#/definitions/ServerError'
    post:
      description: |
        Create a new resource role.
        Only admins can call this endpoint.
      tags:
        - Resource Roles
      security:
        - Bearer: []
      parameters:
        - name: resource
          in: body
          required: true
          schema:
            $ref: '#/definitions/ResourceRole'
      responses:
        '200':
          description: OK - the request was successful
          schema:
            $ref: '#/definitions/ResourceRole'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '409':
          $ref: '#/definitions/Conflict'
        '500':
          $ref: '#/definitions/ServerError'
  '/resource-roles/{resourceRoleId}':
    put:
      description: |
        Update an existing resource role.
        Only admins can call this endpoint.
      tags:
        - Resource Roles
      security:
        - Bearer: []
      parameters:
        - name: resourceRoleId
          type: string
          format: UUID
          in: path
          required: true
        - name: resource
          in: body
          required: true
          schema:
            $ref: '#/definitions/ResourceRole'
      responses:
        '200':
          description: OK - the request was successful
          schema:
            $ref: '#/definitions/ResourceRole'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '409':
          $ref: '#/definitions/Conflict'
        '500':
          $ref: '#/definitions/ServerError'
  /resource-roles/Phase-dependencies:
    get:
      description: Get resource role phase dependencies
      tags:
        - Resource Role Phase Dependencies
      security:
        - Bearer: []
      parameters:
        - name: phaseId
          type: string
          description: The phase id
          format: UUID
          in: query
          required: false
        - name: resourceRoleId
          type: string
          description: The resource role id
          format: UUID
          in: query
          required: false
        - name: phaseState
          type: boolean
          description: The phase state
          in: query
          required: false
      responses:
        '200':
          description: OK - the request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ResourceRolePhaseDependency'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/ServerError'
    post:
      description: Create a new resource role phase dependency.
      tags:
        - Resource Role Phase Dependencies
      security:
        - Bearer: []
      parameters:
        - name: resourceRolePhaseDependency
          in: body
          required: true
          schema:
            $ref: '#/definitions/ResourceRolePhaseDependencyRequestBody'
      responses:
        '200':
          description: OK - the request was successful
          schema:
            $ref: '#/definitions/ResourceRolePhaseDependency'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '409':
          $ref: '#/definitions/Conflict'
        '500':
          $ref: '#/definitions/ServerError'
  '/resource-roles/Phase-dependencies/{id}':
    put:
      description: |
        Update an existing resource role phase dependency.
      tags:
        - Resource Role Phase Dependencies
      security:
        - Bearer: []
      parameters:
        - name: id
          type: string
          format: UUID
          in: path
          required: true
          description: the dependency id
        - name: resourceRolePhaseDependency
          in: body
          required: true
          schema:
            $ref: '#/definitions/ResourceRolePhaseDependencyRequestBody'
      responses:
        '200':
          description: OK - the request was successful
          schema:
            $ref: '#/definitions/ResourceRolePhaseDependency'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '409':
          $ref: '#/definitions/Conflict'
        '500':
          $ref: '#/definitions/ServerError'
    delete:
      description: Delete a resource role phase dependency
      tags:
        - Resource Role Phase Dependencies
      security:
        - Bearer: []
      parameters:
        - name: id
          type: string
          format: UUID
          in: path
          required: true
          description: the dependency id
      responses:
        '200':
          description: OK - the request was successful
          schema:
            $ref: '#/definitions/ResourceRolePhaseDependency'
        '400':
          $ref: '#/definitions/BadRequest'
        '401':
          $ref: '#/definitions/Unauthorized'
        '403':
          $ref: '#/definitions/Forbidden'
        '404':
          $ref: '#/definitions/NotFound'
        '500':
          $ref: '#/definitions/ServerError'
parameters:
  page:
    name: page
    in: query
    description: The page number.
    required: false
    type: integer
    default: 1
  perPage:
    name: perPage
    in: query
    description: The number of items to list per page.
    required: false
    type: integer
    default: 20
    maximum: 100
definitions:
  Resource:
    type: object
    required:
      - id
      - challengeId
      - memberId
      - memberHandle
      - roleId
      - created
    properties:
      id:
        type: string
        format: UUID
      challengeId:
        type: string
        format: UUID
      memberId:
        type: string
        format: UUID
      memberHandle:
        type: string
      roleId:
        type: string
        format: UUID
        description: The resource role ID
      created:
        type: string
        format: date-time
        description: The entity creation date.
      updated:
        type: string
        format: date-time
        description: The entity update date.
      createdBy:
        type: string
        description: The user who created the entity.
        example: Topcoder User
      updatedBy:
        type: string
        description: The user who updated the entity.
        example: Topcoder User
  ResourceRole:
    type: object
    required:
      - name
      - fullReadccess
      - fullWriteAccess
      - isActive
      - selfObtainable
    properties:
      id:
        type: string
        format: UUID
        readOnly: true
      name:
        type: string
        description: 'Unique resource role name, case in-sensitive'
      fullReadAccess:
        type: boolean
      fullWriteAccess:
        type: boolean
      isActive:
        type: boolean
      selfObtainable:
        type: boolean
  ResourceRolePhaseDependency:
    type: object
    required:
      - phaseId
      - resourceRoleId
      - phaseState
    properties:
      id:
        type: string
        format: UUID
        readOnly: true
      phaseId:
        type: string
        format: UUID
        description: the phase id
      resourceRoleId:
        type: string
        format: UUID
        description: the resource role id
      phaseState:
        type: boolean
  ResourceRequestBody:
    type: object
    required:
      - challengeId
      - memberHandle
      - roleId
    properties:
      challengeId:
        type: string
        format: UUID
        description: The challenge id
      memberHandle:
        type: string
        description: The member handle
      roleId:
        type: string
        format: UUID
        description: The resource role ID
  ResourceRolePhaseDependencyRequestBody:
    type: object
    required:
      - phaseId
      - resourceRoleId
      - phaseState
    properties:
      phaseId:
        type: string
        format: UUID
        description: the phase id
      resourceRoleId:
        type: string
        format: UUID
        description: the resource role id
      phaseState:
        type: boolean
  Unauthorized:
    type: object
    description: The unauthorized error entity.
    properties:
      message:
        type: string
        description: The unauthorized error message.
        example: Unable to authenticate the user.
      metadata:
        type: object
        description: freeform metadata object
  NotFound:
    type: object
    description: The not found error entity.
    properties:
      message:
        type: string
        description: The not found error message.
        example: A resource with the name could not be found.
      metadata:
        type: object
        description: freeform metadata object
  ServerError:
    type: object
    description: The server error entity.
    properties:
      message:
        type: string
        description: The server error message.
        example: >-
          Something went wrong while processing your request. We’re sorry for
          the trouble. We’ve been notified of the error and will correct it as
          soon as possible. Please try your request again in a moment.
      metadata:
        type: object
        description: freeform metadata object
  ServiceUnavailable:
    type: object
    description: The server is unavailable
    properties:
      message:
        type: string
        description: The server error message.
        example: Something went wrong with the server.
      metadata:
        type: object
        description: freeform metadata object
  BadRequest:
    type: object
    description: The bad request error entity.
    properties:
      message:
        type: string
        description: The bad request error message.
        example: Invalid input.
      metadata:
        type: object
        description: freeform metadata object
  Forbidden:
    type: object
    description: The permission error entity.
    properties:
      message:
        type: string
        description: The forbidden error message.
        example: You are not allowed to access the request.
      metadata:
        type: object
        description: freeform metadata object
  Conflict:
    type: object
    description: The conflict error entity.
    required:
      - message
    properties:
      message:
        type: string
        description: The conflict error message.
        example: Creating a resource with a name already exists.
      metadata:
        type: object
        description: freeform metadata object
